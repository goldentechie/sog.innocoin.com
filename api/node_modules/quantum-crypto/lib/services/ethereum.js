// Generated by CoffeeScript 1.10.0
(function() {
  var InvalidResponseError, Promise, Web3, _, balances, converter, ethereum, req, web3,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Promise = require("bluebird");

  req = Promise.promisify(require("request"));

  _ = require("lodash");

  InvalidResponseError = require("../errors").InvalidResponseError;

  converter = require("./../converter");

  Web3 = require('web3');

  web3 = new Web3();

  web3.setProvider(new web3.providers.HttpProvider('http://node.cyber.fund:8555'));

  balances = [];

  ethereum = function(addr) {
    var url;
    url = "http://api.etherscan.io/api?module=account&action=balance&address=" + addr + "&tag=latest ";
    return req(url, {
      json: true
    }).timeout(2000).cancellable().spread(function(resp, json) {
      var i, ref, results;
      if (ref = resp.statusCode, indexOf.call((function() {
        results = [];
        for (i = 200; i <= 299; i++){ results.push(i); }
        return results;
      }).apply(this), ref) >= 0) {
        balances = [
          {
            service: "http://api.etherscan.io",
            asset: "ETH",
            quantity: json.result
          }, {
            service: "http://node.cyber.fund",
            asset: "ETC",
            quantity: web3.eth.getBalance(addr)
          }
        ];
        return balances;
      } else {
        if (_.isObject(json) && json.message === "error") {
          return [];
        } else {
          throw new InvalidResponseError({
            service: url,
            response: resp
          });
        }
      }
    }).map(function(token) {
      return {
        status: "success",
        service: token.service,
        address: addr,
        asset: token.asset,
        quantity: converter.toCoin(token.quantity, token.asset)
      };
    })["catch"](Promise.TimeoutError, function(e) {
      return [
        {
          status: 'error',
          service: url,
          message: e.message,
          raw: e
        }
      ];
    })["catch"](InvalidResponseError, function(e) {
      return [
        {
          status: "error",
          service: e.service,
          message: e.message,
          raw: e.response
        }
      ];
    });
  };

  module.exports = ethereum;

}).call(this);
