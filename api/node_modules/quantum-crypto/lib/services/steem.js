// Generated by CoffeeScript 1.10.0
(function() {
  var InvalidResponseError, Promise, _, account_info, balances, global_prop, req, steem,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Promise = require("bluebird");

  req = Promise.promisify(require("request"));

  _ = require("lodash");

  InvalidResponseError = require("../errors").InvalidResponseError;

  account_info = {
    url: "http://node2.cyber.fund:8091/rpc",
    method: 'GET',
    headers: {
      'Content-Type': 'application/json-rpc',
      'Accept': 'application/json-rpc'
    }
  };

  global_prop = JSON.parse(JSON.stringify(account_info));

  global_prop.body = JSON.stringify({
    jsonrpc: '2.0',
    params: [0, "get_dynamic_global_properties", []],
    method: 'call',
    id: Math.floor(Math.random() * 10000)
  });

  balances = [];

  steem = function(account) {
    var addr;
    addr = account.split('-')[1];
    account_info.body = JSON.stringify({
      jsonrpc: '2.0',
      params: [0, "get_accounts", [[addr]]],
      method: 'call',
      id: Math.floor(Math.random() * 10000)
    });
    req(account_info).timeout(300).cancellable().spread(function(resp, json) {
      var i, ref, results;
      json = JSON.parse(json);
      if ((ref = resp.statusCode, indexOf.call((function() {
        results = [];
        for (i = 200; i <= 299; i++){ results.push(i); }
        return results;
      }).apply(this), ref) >= 0) && _.isArray(json.result)) {
        return balances = [
          {
            name: 'STEEM',
            amount: parseFloat(json.result[0].balance, 10)
          }, {
            name: 'SBD',
            amount: parseFloat(json.result[0].sbd_balance, 10)
          }, {
            name: 'SP',
            amount: parseFloat(json.result[0].vesting_shares, 10)
          }
        ];
      } else {
        if (_.isObject(json) && json.message === "error") {
          return [];
        } else {
          throw new InvalidResponseError({
            service: url,
            response: resp
          });
        }
      }
    });
    return req(global_prop).timeout(300).cancellable().spread(function(resp, json) {
      var i, price, ref, results;
      json = JSON.parse(json);
      if (ref = resp.statusCode, indexOf.call((function() {
        results = [];
        for (i = 200; i <= 299; i++){ results.push(i); }
        return results;
      }).apply(this), ref) >= 0) {
        price = parseFloat(json.result.total_vesting_fund_steem, 10) / parseFloat(json.result.total_vesting_shares, 10);
        balances[2].amount *= price;
        balances;
      } else {
        throw new InvalidResponseError({
          service: url,
          response: resp
        });
      }
      return balances;
    }).map(function(token) {
      return {
        status: "success",
        service: "http://node.cyber.fund:8091/rpc",
        address: account,
        quantity: token.amount,
        asset: token.name
      };
    })["catch"](Promise.TimeoutError, function(e) {
      return [
        {
          status: 'error',
          service: url,
          message: e.message,
          raw: e
        }
      ];
    })["catch"](InvalidResponseError, function(e) {
      return [
        {
          status: "error",
          service: e.service,
          message: e.message,
          raw: e.response
        }
      ];
    });
  };

  module.exports = steem;

}).call(this);
