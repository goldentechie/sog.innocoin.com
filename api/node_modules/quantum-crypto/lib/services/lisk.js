// Generated by CoffeeScript 1.10.0
(function() {
  var InvalidResponseError, Promise, _, converter, lisk, req,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Promise = require("bluebird");

  req = Promise.promisify(require("request"));

  _ = require("lodash");

  InvalidResponseError = require("../errors").InvalidResponseError;

  converter = require("./../converter");

  lisk = function(addr) {
    return req('https://login.lisk.io/api/accounts/getBalance', {
      qs: {
        'address': addr
      },
      json: true
    }).timeout(3000).cancellable().spread(function(resp, json) {
      var i, ref, results;
      if (ref = resp.statusCode, indexOf.call((function() {
        results = [];
        for (i = 200; i <= 299; i++){ results.push(i); }
        return results;
      }).apply(this), ref) >= 0) {
        return {
          status: "success",
          service: "https://login.lisk.io",
          address: addr,
          quantity: converter.toCoin(json.balance, "LSK"),
          asset: "LSK"
        };
      } else {
        if (_.isObject(json) && json.message === "error") {
          return [];
        } else {
          throw new InvalidResponseError({
            service: url,
            response: resp
          });
        }
      }
    })["catch"](Promise.TimeoutError, function(e) {
      return [
        {
          status: 'error',
          service: url,
          message: e.message,
          raw: e
        }
      ];
    })["catch"](InvalidResponseError, function(e) {
      return [
        {
          status: "error",
          service: e.service,
          message: e.message,
          raw: e.response
        }
      ];
    });
  };

  module.exports = lisk;

}).call(this);
